function generateHabitHistoryByQuantity(quantity) {
  const completion_frequency = 3;
  const habitItems = [];

  for (let i = 0; i < quantity; i++) {
    let id = i;
    const completion_count = getRandomNumber(0, completion_frequency);

    const daysFromToday = i * 1000 * 60 * 60 * 24;
    const date = new Date(new Date() - daysFromToday)
      .toISOString()
      .slice(0, 10);

    habitItems.push({
      id,
      date,
      completion_count,
      completion_frequency,
    });
  }

  return habitItems;
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ

function getRandomNumber(start, end) {
  return Math.floor(Math.random() * (end - start + 1)) + start;
}

import fs from 'fs';
function saveArrayToArrayFile(arr, filename) {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ necesarios, —á—Ç–æ–±—ã —Ñ–∞–π–ª —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª
  if (fs.existsSync(filename)) {
    const answer = confirm(
      `–¢–∞–∫–æ–π —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ?`
    );
    if (!answer) {
      return console.log(
        '–û—Ç–º–µ–Ω–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∏–º—è.'
      );
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–∏–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
  const jsonString = JSON.stringify(arr, null, 2); // —Å–∏–Ω—Ç–∞–∫—Å–∏—Å·∂¶Á™†_4 –ø–æ–∑–≤–æ–ª—è–µ—Çü§î –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é –µ–¥–∏–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è-indentation`

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
  fs.writeFile(filename, jsonString, 'utf8', (err) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', err);
      return;
    }
    console.log('JSON –º–∞—Å—Å–∏–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ªPermissionsPath');
  });
}

saveArrayToArrayFile(
  generateHabitHistoryByQuantity(700),
  'habitHistoryMock.json'
);
